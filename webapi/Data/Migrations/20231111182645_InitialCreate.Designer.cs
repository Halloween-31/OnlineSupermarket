// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(OnlineSupermarket_DbContext))]
    [Migration("20231111182645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerDiscount", b =>
                {
                    b.Property<int>("CustomersCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountsDiscountId")
                        .HasColumnType("int");

                    b.HasKey("CustomersCustomerId", "DiscountsDiscountId");

                    b.HasIndex(new[] { "DiscountsDiscountId" }, "IX_CustomerDiscount_DiscountsDiscountId");

                    b.ToTable("CustomerDiscount", (string)null);
                });

            modelBuilder.Entity("ProductSale", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesSaleId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "SalesSaleId");

                    b.HasIndex(new[] { "SalesSaleId" }, "IX_ProductSale_SalesSaleId");

                    b.ToTable("ProductSale", (string)null);
                });

            modelBuilder.Entity("ProductStoreBranch", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreBranchesStoreBranchId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "StoreBranchesStoreBranchId");

                    b.HasIndex(new[] { "StoreBranchesStoreBranchId" }, "IX_ProductStoreBranch_StoreBranchesStoreBranchId");

                    b.ToTable("ProductStoreBranches", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Implementations.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationOfDelievery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_Discounts_ProductID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_Employees_StoreID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpendingId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Products_CategoryID");

                    b.HasIndex(new[] { "SpendingId" }, "IX_Products_SpendingId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Products_SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex(new[] { "CustomerId" }, "IX_Sales_CustomerId")
                        .HasDatabaseName("IX_Sales_CustomerId1");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Sales_EmployeeID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Spending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpendingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("SpendingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Spendings_EmployeeID");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Spendings_SupplierID");

                    b.ToTable("Spendings");
                });

            modelBuilder.Entity("webapi.Models.Implementations.StoreBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoreBranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StoreBranches");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CustomerDiscount", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Implementations.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsDiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSale", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Implementations.Sale", null)
                        .WithMany()
                        .HasForeignKey("SalesSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductStoreBranch", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Implementations.StoreBranch", null)
                        .WithMany()
                        .HasForeignKey("StoreBranchesStoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("webapi.Models.Implementations.Discount", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Discounts_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Employee", b =>
                {
                    b.HasOne("webapi.Models.Implementations.StoreBranch", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employees_StoreBranches");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Product", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("webapi.Models.Implementations.Spending", "Spending")
                        .WithMany("Products")
                        .HasForeignKey("SpendingId")
                        .HasConstraintName("FK_Products_Spendings");

                    b.HasOne("webapi.Models.Implementations.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Products_Suppliers");

                    b.Navigation("Category");

                    b.Navigation("Spending");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Sale", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Customer", "Customer")
                        .WithOne("Sale")
                        .HasForeignKey("webapi.Models.Implementations.Sale", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Implementations.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Sales_Employees");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Spending", b =>
                {
                    b.HasOne("webapi.Models.Implementations.Employee", "Employee")
                        .WithMany("Spendings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Spendings_Employees");

                    b.HasOne("webapi.Models.Implementations.Supplier", "Supplier")
                        .WithMany("Spendings")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Spendings_Suppliers");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Customer", b =>
                {
                    b.Navigation("Sale");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Employee", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Spendings");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Product", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Spending", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("webapi.Models.Implementations.StoreBranch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("webapi.Models.Implementations.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Spendings");
                });
#pragma warning restore 612, 618
        }
    }
}
